{"version":3,"sources":["../../src/models/RemoteData.ts","../../src/api/api-wrapper.ts","../../src/components/remote-component/index.tsx","../../src/reducers/fetching-reducer.ts","app/redux/posts/reducer.ts","app/redux/posts/constants.ts","app/redux/users/reducer.ts","app/redux/users/constants.ts","redux/reducer.ts","redux/store.ts","app/containers/layout/index.tsx","app/components/home/index.tsx","app/components/list-users/index.tsx","app/components/list-posts/index.tsx","app/containers/home/index.tsx","app/services/posts.ts","app/redux/posts/actions.ts","app/containers/posts/index.tsx","app/services/users.ts","app/redux/users/actions.ts","app/containers/users/index.tsx","app/containers/users-posts/index.tsx","routes.tsx","index.tsx"],"names":["RemoteKind","error","err","api","action","options","onSuccess","onError","axiosConfig","dispatch","type","kind","Loading","axios","res","data","headers","RemoteComponent","remote","loading","reject","success","remoteData","Object","r","React","initialState","NotAsked","state","postsReducer","combineReducers","posts","fetchingReducer","usersReducer","users","rootReducer","store","createStore","reducer","applyMiddleware","thunk","Header","className","to","exact","Layout","children","Home","UsersLoading","UsersError","ListUsers","scope","map","u","key","id","username","email","name","phone","PostsLoading","PostsError","ListPosts","p","userId","title","body","HomeContainer","method","url","baseURL","fetchPosts","connect","fetchPostsAction","fetchUsers","fetchUsersAction","AppRoutes","path","component","UsersPostsContainer","UsersContainer","PostsContainer","rootEl","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.b35ec581.chunk.js","sourcesContent":["export enum RemoteKind {\n  NotAsked = 'NOT_ASKED',\n  Loading = 'LOADING',\n  Success = 'SUCCESS',\n  Reject = 'REJECT',\n}\n\nexport type NotAsked = {\n  kind: RemoteKind.NotAsked;\n};\n\nexport type Loading = {\n  kind: RemoteKind.Loading;\n};\n\nexport type Success<T> = {\n  kind: RemoteKind.Success;\n  data: T;\n};\n\nexport type Reject<E> = {\n  kind: RemoteKind.Reject;\n  error: E;\n};\n\nexport type RemoteData<T, E> = NotAsked | Loading | Success<T> | Reject<E>;\n","import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { Dispatch } from 'redux';\nimport { Action, RemoteKind } from '../models';\n\nconst error = (err: AxiosError) => err.response?.data;\n\ninterface Options<T, E> extends AxiosRequestConfig {\n  action?: string;\n  onSuccess?: (res: T) => void;\n  onError?: (err: E) => void;\n}\n\nconst api = <T, E>(\n  options: Options<T, E>,\n): ((dispatch: Dispatch<Action<T, E>>) => Promise<T>) => {\n  const { action, onSuccess, onError, ...axiosConfig } = options;\n\n  return (dispatch: Dispatch<Action<T, E>>) => {\n    const onLoading = () => {\n      if (action) dispatch({ type: action, kind: RemoteKind.Loading });\n    };\n\n    const onFulfilled = (res: AxiosResponse<T>) => {\n      if (action)\n        dispatch({\n          type: action,\n          kind: RemoteKind.Success,\n          data: res.data,\n          headers: res.headers,\n        });\n      if (onSuccess) onSuccess(res.data);\n      return res.data;\n    };\n\n    const onRejected = (res: AxiosError<E>) => {\n      if (!axios.isCancel(res)) {\n        if (action)\n          dispatch({\n            type: action,\n            kind: RemoteKind.Reject,\n            error: error(res),\n            headers: res.response?.headers,\n          });\n        if (onError) onError(error(res));\n        return error(res);\n      }\n    };\n\n    onLoading();\n    return axios(axiosConfig).then(onFulfilled).catch(onRejected);\n  };\n};\n\nexport default api;\n","import * as React from 'react';\nimport {\n  RemoteKind,\n  RemoteDataAggregate,\n  SuccessAggregate,\n  RejectAggregate,\n  RemoteData,\n} from '../../models';\nimport { remoteToReject, remoteToSuccess } from '../../utils';\n\ninterface RemoteComponentProps<T extends RemoteDataAggregate<T>> {\n  remote: T;\n  success: (data: SuccessAggregate<T>) => JSX.Element;\n  loading?: () => JSX.Element;\n  reject?: (reject: RejectAggregate<T>) => JSX.Element;\n}\n\nconst RemoteComponent = <T extends RemoteDataAggregate<T>>({\n  remote,\n  loading,\n  reject,\n  success,\n}: RemoteComponentProps<T>) => {\n  const remoteData: RemoteData<any, any>[] = Object.values(remote);\n\n  if (remoteData.some((r) => r.kind === RemoteKind.NotAsked))\n    return <React.Fragment></React.Fragment>;\n\n  if (remoteData.some((r) => r.kind === RemoteKind.Loading)) {\n    if (loading) return loading();\n    return <React.Fragment></React.Fragment>;\n  }\n\n  if (remoteData.some((r) => r.kind === RemoteKind.Reject)) {\n    if (reject) return reject(remoteToReject(remote));\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return success(remoteToSuccess(remote));\n};\n\nexport default RemoteComponent;\n","import { RemoteData, RemoteKind, Action, ActionType } from '../models';\n\nexport type State<T, E> = RemoteData<T, E>;\n\nconst initialState: State<any, any> = {\n  kind: RemoteKind.NotAsked,\n};\n\nexport default <T, E>(actionType: ActionType) => (\n  state: State<T, E> = initialState,\n  action: Action<T, E>,\n): State<T, E> => {\n  if (action.type === actionType) {\n    switch (action.kind) {\n      case RemoteKind.Loading:\n        return {\n          ...state,\n          kind: RemoteKind.Loading,\n        };\n\n      case RemoteKind.Success:\n        return {\n          ...state,\n          kind: RemoteKind.Success,\n          data: action.data,\n        };\n\n      case RemoteKind.Reject:\n        return {\n          ...state,\n          kind: RemoteKind.Reject,\n          error: action.error,\n        };\n\n      default:\n        return state;\n    }\n  }\n\n  return state;\n};\n","import { Reducer } from 'react';\nimport { combineReducers } from 'redux';\nimport { fetchingReducer, RemoteData } from 'remote-data';\nimport { Post, ErrorResponse } from '../../models';\nimport { FETCH_POSTS } from './constants';\n\nexport type PostsStore = {\n  posts: RemoteData<Post[], ErrorResponse>;\n};\n\nconst postsReducer: Reducer<PostsStore, any> = combineReducers({\n  posts: fetchingReducer<Post[], ErrorResponse>(FETCH_POSTS),\n});\n\nexport default postsReducer;\n","export const FETCH_POSTS = 'FETCH_POSTS';\n","import { Reducer } from 'react';\nimport { combineReducers } from 'redux';\nimport { fetchingReducer, RemoteData } from 'remote-data';\nimport { User, ErrorResponse } from '../../models';\nimport { FETCH_USERS } from './constants';\n\nexport type UsersStore = {\n  users: RemoteData<User[], ErrorResponse>;\n};\n\nconst usersReducer: Reducer<UsersStore, any> = combineReducers({\n  users: fetchingReducer<User[], ErrorResponse>(FETCH_USERS),\n});\n\nexport default usersReducer;\n","export const FETCH_USERS = 'FETCH_USERS';\n","import { combineReducers } from 'redux';\nimport posts from '../app/redux/posts/reducer';\nimport users from '../app/redux/users/reducer';\n\nconst rootReducer = combineReducers({\n  posts,\n  users,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = () => (\n  <header className=\"header\">\n    <div className=\"wrapper header__wrapper\">\n      <div className=\"brand\">Remote Data</div>\n      <ul className=\"nav\">\n        <li className=\"nav__item\">\n          <NavLink className=\"nav__link\" to=\"/\" exact={true}>\n            Home\n          </NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink className=\"nav__link\" to=\"/users\">\n            Users\n          </NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink className=\"nav__link\" to=\"/posts\">\n            Posts\n          </NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink className=\"nav__link\" to=\"/users-posts\">\n            (Multiple) Users & Posts\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  </header>\n);\n\nconst Layout = ({ children }: React.ComponentProps<any>) => (\n  <div className=\"site\">\n    <Header />\n    <main className=\"wrapper\">{children}</main>\n  </div>\n);\nexport default Layout;\n","import * as React from 'react';\n\nconst Home = () => (\n  <div>\n    <h1 className=\"page-title\">\n      Handling Asynchronous fetching of data with React & Redux\n    </h1>\n  </div>\n);\n\nexport default Home;\n","import * as React from 'react';\nimport { User, ErrorResponse } from '../../models';\n\nexport const UsersLoading = () => <div>Loading users...</div>;\nexport const UsersError = ({ error }: { error: ErrorResponse }) => (\n  <div>{error.error}</div>\n);\n\nconst ListUsers = ({ users }: { users: User[] }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">Username</th>\n        <th scope=\"col\">Email</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Phone</th>\n      </tr>\n    </thead>\n    <tbody>\n      {users.map((u) => (\n        <tr key={u.id}>\n          <th scope=\"row\">{u.id}</th>\n          <td>{u.username}</td>\n          <td>{u.email}</td>\n          <td>{u.name}</td>\n          <td>{u.phone}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default ListUsers;\n","import * as React from 'react';\nimport { Post, ErrorResponse } from '../../models';\n\nexport const PostsLoading = () => <div>Loading posts...</div>;\nexport const PostsError = ({ error }: { error: ErrorResponse }) => <div>{error.error}</div>;\n\nconst ListPosts = ({ posts }: { posts: Post[] }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">User</th>\n        <th scope=\"col\">Title</th>\n        <th scope=\"col\">Body</th>\n      </tr>\n    </thead>\n    <tbody>\n      {posts.map((p) => (\n        <tr key={p.id}>\n          <th scope=\"row\">{p.id}</th>\n          <td>{p.userId}</td>\n          <td>{p.title}</td>\n          <td>{p.body}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default ListPosts;\n","import * as React from 'react';\nimport { Home } from '../../components';\n\nconst HomeContainer = () => (\n  <div className=\"home-container\">\n    <Home />\n  </div>\n);\nexport default HomeContainer;\n","import { api } from 'remote-data';\nimport { Post, ErrorResponse } from '../models';\nimport { FETCH_POSTS } from '../redux/posts/constants';\n\nconst fetchPosts = () =>\n  api<Post[], ErrorResponse>({\n    method: 'GET',\n    url: 'posts',\n    baseURL: 'https://jsonplaceholder.typicode.com/',\n    action: FETCH_POSTS,\n  });\n\nexport default {\n  fetchPosts,\n};\n","import posts from '../../services/posts';\n\nconst fetchPosts = () => posts.fetchPosts();\n\nexport { fetchPosts };\n","import * as React from 'react';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, Post, ErrorResponse } from '../../models';\nimport { RemoteData, RemoteComponent } from 'remote-data';\nimport { fetchPosts as fetchPostsAction } from '../../redux/posts/actions';\nimport { PostsError, PostsLoading, ListPosts } from '../../components';\n\ntype PostsContainerProps = {\n  fetchPosts: () => Promise<Post[]>;\n  posts: RemoteData<Post[], ErrorResponse>;\n};\n\nconst PostsContainer = ({ fetchPosts, posts }: PostsContainerProps) => {\n  React.useEffect(() => {\n    fetchPosts();\n  }, [fetchPosts]);\n\n  return (\n    <>\n      <h1 className=\"page-title\">Posts</h1>\n      <RemoteComponent\n        remote={{ posts }}\n        loading={PostsLoading}\n        reject={({ posts }) => <PostsError error={posts.error} />}\n        success={({ posts }) => <ListPosts posts={posts.data} />}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ posts }: StoreState) => ({\n  posts: posts.posts,\n});\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<StoreState, {}, AnyAction>,\n) => ({\n  fetchPosts: () => dispatch(fetchPostsAction()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsContainer);\n","import { api } from 'remote-data';\nimport { User, ErrorResponse } from '../models';\nimport { FETCH_USERS } from '../redux/users/constants';\n\nconst fetchUsers = () =>\n  api<User[], ErrorResponse>({\n    method: 'GET',\n    url: 'users',\n    baseURL: 'https://jsonplaceholder.typicode.com/',\n    action: FETCH_USERS,\n  });\n\nexport default {\n  fetchUsers,\n};\n","import users from '../../services/users';\n\nconst fetchUsers = () => users.fetchUsers();\n\nexport { fetchUsers };\n","import * as React from 'react';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, User, ErrorResponse } from '../../models';\nimport { RemoteData, RemoteComponent } from 'remote-data';\nimport { fetchUsers as fetchUsersAction } from '../../redux/users/actions';\nimport { UsersLoading, UsersError, ListUsers } from '../../components';\n\ntype UsersContainerProps = {\n  fetchUsers: () => Promise<User[]>;\n  users: RemoteData<User[], ErrorResponse>;\n};\n\nconst UsersContainer = ({ fetchUsers, users }: UsersContainerProps) => {\n  React.useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  return (\n    <>\n      <h1 className=\"page-title\">Users</h1>\n      <RemoteComponent\n        remote={{ users }}\n        loading={UsersLoading}\n        reject={({ users }) => <UsersError error={users.error} />}\n        success={({ users }) => <ListUsers users={users.data} />}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ users }: StoreState) => ({\n  users: users.users,\n});\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<StoreState, {}, AnyAction>,\n) => ({\n  fetchUsers: () => dispatch(fetchUsersAction()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);\n","import * as React from 'react';\nimport { AnyAction } from 'redux';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { StoreState, Post, ErrorResponse, User } from '../../models';\nimport { RemoteData, RemoteComponent } from 'remote-data';\nimport { fetchPosts as fetchPostsAction } from '../../redux/posts/actions';\nimport { fetchUsers as fetchUsersAction } from '../../redux/users/actions';\nimport {\n  PostsError,\n  PostsLoading,\n  ListPosts,\n  UsersError,\n  ListUsers,\n  UsersLoading,\n} from '../../components';\n\ntype UsersPostsContainerProps = {\n  fetchPosts: () => Promise<Post[]>;\n  fetchUsers: () => Promise<User[]>;\n  posts: RemoteData<Post[], ErrorResponse>;\n  users: RemoteData<User[], ErrorResponse>;\n};\n\nconst UsersPostsContainer = ({\n  fetchPosts,\n  fetchUsers,\n  posts,\n  users,\n}: UsersPostsContainerProps) => {\n  React.useEffect(() => {\n    fetchUsers();\n    fetchPosts();\n  }, [fetchPosts, fetchUsers]);\n\n  return (\n    <>\n      <h1 className=\"page-title\">(Multiple) Users & Posts</h1>\n      <RemoteComponent\n        remote={{ posts, users }}\n        loading={() => (\n          <>\n            <PostsLoading />\n            <UsersLoading />\n          </>\n        )}\n        reject={({ posts, users }) => (\n          <>\n            {users.error && <UsersError error={users.error} />}\n            {posts.error && <PostsError error={posts.error} />}\n          </>\n        )}\n        success={({ posts, users }) => (\n          <>\n            <h1 className=\"page-title\">Users</h1>\n            <ListUsers users={users.data} />\n            <h1 className=\"page-title\">Posts</h1>\n            <ListPosts posts={posts.data} />\n          </>\n        )}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ posts, users }: StoreState) => ({\n  posts: posts.posts,\n  users: users.users,\n});\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<StoreState, {}, AnyAction>,\n) => ({\n  fetchPosts: () => dispatch(fetchPostsAction()),\n  fetchUsers: () => dispatch(fetchUsersAction()),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(UsersPostsContainer);\n","import * as React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport {\n  Layout,\n  HomeContainer,\n  PostsContainer,\n  UsersContainer,\n  UsersPostsContainer,\n} from './app/containers';\n\nconst AppRoutes = () => (\n  <BrowserRouter>\n    <Layout>\n      <Switch>\n        <Route path=\"/users-posts\" component={UsersPostsContainer} />\n        <Route path=\"/users\" component={UsersContainer} />\n        <Route path=\"/posts\" component={PostsContainer} />\n        <Route path=\"/\" component={HomeContainer} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n);\n\nexport default AppRoutes;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport AppRoutes from './routes';\nimport './styles/index.scss';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppRoutes />\n  </Provider>,\n  rootEl,\n);\n"],"sourceRoot":""}